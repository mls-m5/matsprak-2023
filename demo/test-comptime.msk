

template (typename T, int num)
export struct Array {
    _value: T[num];
}

comptime generate_prop(name, T) {

fn name (value: T) {
    // How to join names? Test syntax, where everything associated to template
    // is metaprogramming
    template.join(_, name) = value;
}

fn name (value: T) -> T {
    return template.join(_, name);
}

}


export struct Ship {
    _x: float;
    _y: float;

    fn x() -> _ {
        return _x;
    }

    fn x(value: float) {
        _x = value;
    }

    fn y() -> _ {
        return _y;
    }

    fn y(value: float) {
        _y = value;
    }

    // If properties should be used or not is left for the reader to decide
    // This should be functionally ekvivalent the above x property
    generate_prop(x);

    fn move (int x, int y, -> res1, -> res2) mut {
        _x = x;
        _y = y;

        res1 = 10;
        res2 = 20;
    }
}

fn main() -> (res1: int, res2: int) {
    let x = new(Array(int, 10));

    let s = new(Ship(
        x = 10,
        y = 20,
    ));

    let a = alloc(Array(Ship, 20, {}))

    print(sys.args(1));

    let (x, y) = ship.move(10, 20);
}
